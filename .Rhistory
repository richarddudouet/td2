labels=c("non", "oui")),
sleeptrouble.f=factor(SleepTrouble,
levels=c("No", "Yes"),
labels=c("non", "oui"))
)
# Vérifications :
# Genre :
crosstable(d,
Gender,
by=genre.f)
# Race :
crosstable(d,
Race1,
by=race.f)
summary(is.na(d$Race1)) # aucune données manquantes
summary(is.na(d$race.f)) # aucune données manquantes
# Work
crosstable(d,
Work,
by=work.f)
d %>% names
# Smoke
crosstable(d,
SmokeNow,
by=smoke.f)
d %>% names
# Education
crosstable(d,
Education,
by=education.f)
d=d %>%
mutate(genre.f= factor(Gender,
levels=c("male", "female"),
labels= c("hommes", "femmes")),
race= case_when(
Race1=="White" ~ "whites",
is.na(Race1) ~ NA_character_,
TRUE ~ "minorities"),
race.f=factor(race,
levels=c("whites", "minorities"),
labels=c("Blancs", "Minorités")),
work=case_when(
Work=="Looking" | Work=="NotWorking" ~ "no",
Work=="Working" ~ "yes"),
work.f=factor(work,
levels=c("no", "yes"),
labels=c("non", "oui")),
smoke.f=factor(SmokeNow,
levels=c("No", "Yes"),
labels=c("non", "oui")),
education=case_when(
Education=="College Grad" | Education=="Some College" ~ "tertiary",
is.na(Education)~ NA_character_,
TRUE ~ "before tertiary"),
education.f=factor(education,
levels=c( "tertiary", "before tertiary"),
labels=c( "high", "low")),
physactive.f=factor(PhysActive,
levels=c("No", "Yes"),
labels=c("no", "yes")),
depressed=case_when(
Depressed=="None" ~ "no",
is.na(Depressed)~ NA_character_,
TRUE ~ "yes"),
depressed.f= factor(depressed,
levels=c("no", "yes"),
labels=c("non", "oui")),
sleeptrouble.f=factor(SleepTrouble,
levels=c("No", "Yes"),
labels=c("non", "oui"))
)
### Vérifications : ----
# Genre :
crosstable(d,
Gender,
by=genre.f)
# Race :
crosstable(d,
Race1,
by=race.f)
summary(is.na(d$Race1)) # aucune données manquantes
summary(is.na(d$race.f)) # aucune données manquantes
# Work
crosstable(d,
Work,
by=work.f)
# Smoke
crosstable(d,
SmokeNow,
by=smoke.f)
# Education
crosstable(d,
Education,
by=education.f)
d %>% names
# Activité physique
crosstable(d,
PhysActive,
by=physactive.f)
# Depressed
crosstable(d,
Depressed,
by=depressed.f)
# Sleeptrouble
crosstable(d,
SleepTrouble,
by=sleeptrouble.f)
#___________________________________________________________________________----
# 9. Décrire succintement  ----
#___________________________----
## Population totale:
d %>% names
## Version plus simple----
d=d %>%
mutate(Weight_num=as.numeric(Weight), # Crée une nouvelle variable Weight_num qui est la variable Weight                                          convertie en numérique
Height_num=as.numeric(Height),
Height_m= Height_num/100, # L'imc est en kg/m2 et ici la variable est en centimètre
imc=Weight_num/ Height_m^2, # le calcul de l'imc
imc_cat=case_when(
imc<25 ~ "Normal",
imc>=25 & imc<30 ~ "Surpoids",
imc>=30 ~ "Obésité",), # Catégorisation de l'IMC
)
# Vérification:
d %>%
crosstable(.,
d %>% select(contains(c("num", "_m", "imc"))) %>% names)
d %>% crosstable(.,
imc,
by=imc_cat) # Un IMC à 81 ???
d=d %>%
mutate(across(starts_with("BP"),
~ as.numeric(.),
.names ="{col}_num")) %>%
mutate(tas_moy=(BPSys1_num + BPSys2_num + BPSys3_num)/3) %>%
mutate(tad_moy=(BPDia1_num + BPDia2_num + BPDia3_num)/3)
d %>%
select(contains(c("BP", "_num", "moy"))) %>%
view()
d=d %>%
mutate(date_naissance=ymd(ddn))
## b. Calcul de l'âge----
d=d %>%
mutate(age=interval(start= date_naissance,
end= today()) %>%
as.period(.) %>%
year(.))
# On vérifie
class(d$age) # classe numérique
summary(d$age)  # à l'air cohérente
d %>%
select(age, date_naissance, age_q) %>%
view()
## c. Catégorisation de l'âge en quartile----
d=d %>%
mutate(age_q=ntile(age,4) %>% as.factor(.))
d %>%
select(age, date_naissance) %>%
view()
## c. Catégorisation de l'âge en quartile----
d=d %>%
mutate(age_q=ntile(age,4) %>% as.factor(.))
## Vérification:
crosstable(d,
age,
by=age_q)
summary(d$age)
d %>%
select(where(~ is.character(.))) %>%
names
d=d %>%
mutate(genre.f= factor(Gender,
levels=c("male", "female"),
labels= c("hommes", "femmes")),
race= case_when(
Race1=="White" ~ "whites",
is.na(Race1) ~ NA_character_,
TRUE ~ "minorities"),
race.f=factor(race,
levels=c("whites", "minorities"),
labels=c("Blancs", "Minorités")),
work=case_when(
Work=="Looking" | Work=="NotWorking" ~ "no",
Work=="Working" ~ "yes"),
work.f=factor(work,
levels=c("no", "yes"),
labels=c("non", "oui")),
smoke.f=factor(SmokeNow,
levels=c("No", "Yes"),
labels=c("non", "oui")),
education=case_when(
Education=="College Grad" | Education=="Some College" ~ "tertiary",
is.na(Education)~ NA_character_,
TRUE ~ "before tertiary"),
education.f=factor(education,
levels=c( "tertiary", "before tertiary"),
labels=c( "high", "low")),
physactive.f=factor(PhysActive,
levels=c("No", "Yes"),
labels=c("no", "yes")),
depressed=case_when(
Depressed=="None" ~ "no",
is.na(Depressed)~ NA_character_,
TRUE ~ "yes"),
depressed.f= factor(depressed,
levels=c("no", "yes"),
labels=c("non", "oui")),
sleeptrouble.f=factor(SleepTrouble,
levels=c("No", "Yes"),
labels=c("non", "oui"))
)
### Vérifications : ----
# Genre :
crosstable(d,
Gender,
by=genre.f)
# Race :
crosstable(d,
Race1,
by=race.f)
summary(is.na(d$Race1)) # aucune données manquantes
summary(is.na(d$race.f)) # aucune données manquantes
# Work
crosstable(d,
Work,
by=work.f)
# Smoke
crosstable(d,
SmokeNow,
by=smoke.f)
# Education
crosstable(d,
Education,
by=education.f)
# Activité physique
crosstable(d,
PhysActive,
by=physactive.f)
# Depressed
crosstable(d,
Depressed,
by=depressed.f)
# Sleeptrouble
crosstable(d,
SleepTrouble,
by=sleeptrouble.f)
#___________________________________________________________________________----
# 8. Décrire succintement  ----
#___________________________----
## Population totale:
d %>% names
summary(d$imc_cat)
table(d$imc_cat)
d=d %>%
mutate(genre.f= factor(Gender,
levels=c("male", "female"),
labels= c("hommes", "femmes")),
race= case_when(
Race1=="White" ~ "whites",
is.na(Race1) ~ NA_character_,
TRUE ~ "minorities"),
race.f=factor(race,
levels=c("whites", "minorities"),
labels=c("Blancs", "Minorités")),
work=case_when(
Work=="Looking" | Work=="NotWorking" ~ "no",
Work=="Working" ~ "yes"),
work.f=factor(work,
levels=c("no", "yes"),
labels=c("non", "oui")),
smoke.f=factor(SmokeNow,
levels=c("No", "Yes"),
labels=c("non", "oui")),
education=case_when(
Education=="College Grad" | Education=="Some College" ~ "tertiary",
is.na(Education)~ NA_character_,
TRUE ~ "before tertiary"),
education.f=factor(education,
levels=c( "tertiary", "before tertiary"),
labels=c( "high", "low")),
physactive.f=factor(PhysActive,
levels=c("No", "Yes"),
labels=c("no", "yes")),
depressed=case_when(
Depressed=="None" ~ "no",
is.na(Depressed)~ NA_character_,
TRUE ~ "yes"),
depressed.f= factor(depressed,
levels=c("no", "yes"),
labels=c("non", "oui")),
sleeptrouble.f=factor(SleepTrouble,
levels=c("No", "Yes"),
labels=c("non", "oui")),
imc_cat.f=factor(imc_cat,
levels=c("Normal", "Surpoids", "Obésité")
)
)
# IMC :
crosstable(d,
imc,
by=imc_cat.f)
d %>% crosstable(.,
imc,
by=imc_cat) # Un IMC à 81 ???
## Version plus complexe----
##_____________________-----
# D'abord convertir puis faire le calcul:
d=d %>%
mutate(across(c(Weight, Height),  # across permet de faire les modifications sur plusieurs variables
~ as.numeric(.),    # ~ permet d'appeler une fonction dans l'argument, ici convertir en num
.names= "{.col}_num")) %>% # Je veux que mes nouvelles variables s'appelle comme leur nom d'origine + _num
mutate(Height_m= Height_num/100,
imc=round(Weight_num/ ((Height_m)^2)),
imc_cat=case_when(
imc<25 ~ "Normal",
imc>=25 & imc<30 ~ "Surpoids",
imc>=30 ~ "Obésité"))
# Vérification:
d %>%
crosstable(.,
d %>% select(contains(c("num", "_m", "imc"))) %>% names)
d %>% crosstable(.,
imc,
by=imc_cat) # Un IMC à 81 ???
d=d %>%
mutate(genre.f= factor(Gender,
levels=c("male", "female"),
labels= c("hommes", "femmes")),
race= case_when(
Race1=="White" ~ "whites",
is.na(Race1) ~ NA_character_,
TRUE ~ "minorities"),
race.f=factor(race,
levels=c("whites", "minorities"),
labels=c("Blancs", "Minorités")),
work=case_when(
Work=="Looking" | Work=="NotWorking" ~ "no",
Work=="Working" ~ "yes"),
work.f=factor(work,
levels=c("no", "yes"),
labels=c("non", "oui")),
smoke.f=factor(SmokeNow,
levels=c("No", "Yes"),
labels=c("non", "oui")),
education=case_when(
Education=="College Grad" | Education=="Some College" ~ "tertiary",
is.na(Education)~ NA_character_,
TRUE ~ "before tertiary"),
education.f=factor(education,
levels=c( "tertiary", "before tertiary"),
labels=c( "high", "low")),
physactive.f=factor(PhysActive,
levels=c("No", "Yes"),
labels=c("no", "yes")),
depressed=case_when(
Depressed=="None" ~ "no",
is.na(Depressed)~ NA_character_,
TRUE ~ "yes"),
depressed.f= factor(depressed,
levels=c("no", "yes"),
labels=c("non", "oui")),
sleeptrouble.f=factor(SleepTrouble,
levels=c("No", "Yes"),
labels=c("non", "oui")),
imc_cat.f=factor(imc_cat,
levels=c("Normal", "Surpoids", "Obésité")
)
)
# IMC :
crosstable(d,
imc,
by=imc_cat.f)
#___________________________________________________________________________----
# 8. Décrire succintement  ----
#___________________________----
## Population totale:
d %>% names
d %>%
select(education.f,
imc_cat.f,
genre.f,
race.f,
work.f,
smoke.f,
physactive.f,
depressed.f,
sleeptrouble.f,
tas_moy,
tad_moy) %>%
crosstable(.,
test=TRUE)
t1=d %>%
select(education.f,
imc_cat.f,
genre.f,
race.f,
work.f,
smoke.f,
physactive.f,
depressed.f,
sleeptrouble.f,
tas_moy,
tad_moy) %>%
crosstable(.,
test=TRUE)
t1
view(t1)
library(gt)
t1 %>% gt
t1=d %>%
select(education.f,
imc_cat.f,
genre.f,
race.f,
work.f,
smoke.f,
physactive.f,
depressed.f,
sleeptrouble.f,
tas_moy,
tad_moy) %>%
crosstable(.,
test=TRUE) %>%
select(-.id)
view(t1)
t1 %>% gt
esquisse:::esquisser()
# Esquisse et fonctionnement de ggplot2 et ggbivariate
library(ggeffects)
write_xlsx(nhanes2,
"Data/nhanes2.xlsx")
library(writexl)
write_xlsx(nhanes2,
"Data/nhanes2.xlsx")
setdiff(x= unique(nhanes_educ$ID),
y= unique(nhanes2$ID))
#____________________________________________________________________________----
# 0. Joindre les deux bases de données ----
#___________________________----
## Pour que les lignes de nhanes_educ correspondent aux lignes de nhanes2
## Comment voir les ID différents entre les deux ----
setdiff(x= unique(nhanes_educ$ID),
y= unique(nhanes2$ID)) %>%  # Setdiff retourne les éléments de x qui                                      ne sont pas dans y dans un vecteur
length()                    # Donne la longueur du vecteur
## a. Packages à charger----
library (tidyverse)
#____________________________________________________________________________----
# 0. Joindre les deux bases de données ----
#___________________________----
## Pour que les lignes de nhanes_educ correspondent aux lignes de nhanes2
## Comment voir les ID différents entre les deux ----
setdiff(x= unique(nhanes_educ$ID),
y= unique(nhanes2$ID)) %>%  # Setdiff retourne les éléments de x qui                                      ne sont pas dans y dans un vecteur
length()                    # Donne la longueur du vecteur
d_join$ID==nhanes2$ID
summary(d_join$ID==nhanes2$ID)
## Vérifier que les bases ont été correctement join----
nrow(d_join)
# j'essaie de trouver les variables qu'il me demande
d_join %>%
select(ID, Gender,
contains(c("date", "naissance", "birth", "date","age")) | contains("Age"),
contains("Race"),
Work, Weight, Height,
starts_with("BP"),
contains("smok"),
Education,
contains("PhysActive"),
Depressed,
SleepTrouble,
Commentaires
) %>%  names()
d %>% names
str(d)
# Qu'est ce que Race3?
summary(d_join$Race3) #Que des NA, je peux l'enlever
d=d %>%
select(-Race3)
# Qu'est ce que Smoke100, Smoke100n
summary(d_join$Smoke100)
table(d_join$Smoke100)
crosstable(d_join,
c(Smoke100, Smoke100n),
by=SmokeNow) # On suppose que c'est smoke dans les 100 derniers jours,
library(crosstable)
crosstable(d_join,
c(Smoke100, Smoke100n),
by=SmokeNow) # On suppose que c'est smoke dans les 100 derniers jours,
?crosstable
# Qu'est ce que PhysActiveDays selon vous?
crosstable(d_join,
PhysActiveDays,
by=PhysActive)
# Nous on veut juste savoir si ils sont physically active oui ou non.
d_join %>%
select(ID, Gender, ddn,
Race1,
Work, Weight, Height,
starts_with("BP"),
SmokeNow,
Education,
PhysActive,
Depressed,
SleepTrouble,
Commentaires
) %>%  names()
# On veut visualiser globalement les données, voir sous quel formats ils sont maintenant:
library(labelled)
look_for(d)
d %>% crosstable(.,
imc,
by=imc_cat) # Un IMC à 81 ???
